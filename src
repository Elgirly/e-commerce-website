from flask import Flask, jsonify, request
from werkzeug.exceptions import BadRequest
from flask_jwt_extended import jwt_required, get_jwt_identity
from database import db_session
from models import Product

app = Flask(__name__)

# Existing routes

@app.route('/products', methods=['GET'])
def get_all_products():
    products = Product.query.all()
    return jsonify({'products': [product.serialize() for product in products]})

@app.route('/products/<product_id>', methods=['GET'])
def get_product_details(product_id):
    product = Product.query.get(product_id)
    
    # Check if the product exists
    if not product:
        raise BadRequest('Product not found')
    
    return jsonify(product.serialize())

# New routes

@app.route('/products', methods=['POST'])
def add_product():
    product_data = request.get_json()
    
    # Validate input data
    if 'name' not in product_data or 'price' not in product_data:
        raise BadRequest('Invalid product data')
    
    # Create a new product
    new_product = Product(name=product_data['name'], price=product_data['price'])
    db_session.add(new_product)
    db_session.commit()
    
    return jsonify({'message': 'Product added successfully'})

@app.route('/products/<product_id>', methods=['PUT'])
def update_product(product_id):
    product_data = request.get_json()
    
    # Validate input data
    if 'name' not in product_data or 'price' not in product_data:
        raise BadRequest('Invalid product data')
    
    # Retrieve the product
    product = Product.query.get(product_id)
    
    # Check if the product exists
    if not product:
        raise BadRequest('Product not found')
    
    # Update the product
    product.name = product_data['name']
    product.price = product_data['price']
    db_session.commit()
    
    return jsonify({'message': 'Product updated successfully'})

@app.route('/products/<product_id>', methods=['DELETE'])
def delete_product(product_id):
    # Retrieve the product
    product = Product.query.get(product_id)
    
    # Check if the product exists
    if not product:
        raise BadRequest('Product not found')
    
    # Delete the product
    db_session.delete(product)
    db_session.commit()
    
    return jsonify({'message': 'Product deleted successfully'})

if __name__ == '__main__':
    app.run()
